# ==========================
# ===   User settings    ===
# ==========================

set -g @copy_use_osc52_fallback on
# set -g @copy_backend_remote_tunnel_port 5599

# ==========================
# ===  General settings  ===
# ==========================

# Default terminal is screen because of this, from tmux man pages:
## "For tmux to work correctly, this must be set to ‘screen’, ‘tmux’ or a derivative of them."
set -sg default-terminal "screen-256color"

# Setting scroll back buffer
set -g history-limit 20000

# Setting limit for paste buffers. It's where copied text is stored.
set -sg buffer-limit 100

# Determines how long tmux will wait, before releasing Esc key, after it's pressed.
# Default is 500 milliseconds, and in some programs you can notice delay when pressing Ecs.
# In vim, for example. Setting it to 0 will remove delay. I never noticed any problem with it.
# But according to this https://github.com/tmux/tmux/issues/907#issuecomment-299404405
# some may arise. If you know of any real scenario, when escape time 0
# causes problems, please let me know.
set -sg escape-time 0

# From tmux man pages:
## Set the amount of time for which status line messages and other on-screen indicators are
## displayed. If set to 0, messages and indicators are displayed until a key is pressed.
set -g display-time 1500

# From tmux man pages:
## Allow multiple commands to be entered without pressing the prefix-key again in the specified time
## milliseconds (the default is 500).  Whether a key repeats may be set when it is bound using
## the -r flag to bind-key. Repeat is enabled for the default keys bound to the resize-pane command.
set -g repeat-time 500

# Disable rename of windows by programs via terminal escape sequence.
set -wg allow-rename off

# Set parent terminal title to reflect current window in tmux session 
set -g set-titles on
set -g set-titles-string "#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
set -wg pane-base-index 1


# ==========================
# ===   Key bindings     ===
# ==========================

# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-a

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind \}    # swap-pane -D
unbind \{    # swap-pane -U
unbind \[    # paste-buffer
unbind \]    
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer 
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left

# Reload tmux configuration 
bind '$' source-file ~/.tmux.conf \; display "Config reloaded"

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -r h previous-window
bind -r l next-window
bind -r k select-pane -t :.-
bind -r j select-pane -t :.+
bind -r Tab last-window   # cycle thru MRU tabs
bind -r C-o swap-pane -D

# Zoom pane
bind z resize-pane -Z

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'


# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
set -sg monitor-activity on
set -sg monitor-bell on
set -sg activity-action other
set -sg bell-action other
set -sg silence-action other
bind m if -F "#{monitor-silence}" {
    set -w monitor-silence 0
    set -w monitor-activity on
    set -w monitor-bell on
    display-message "Monitor window silence [OFF]"
} {
    command-prompt -p "Monitor silence: interval (s)" "set -w monitor-silence %%\;\
    set -w monitor-activity off\;\
    set -w monitor-bell off"
}


# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================

# Prefer vi style key table
set -wg mode-keys vi

bind p paste-buffer
bind C-p choose-buffer
bind M set -wg mouse

# trigger copy mode by
bind Space copy-mode

# Scroll
bind -T copy-mode-vi K            send-keys -X scroll-up
bind -T copy-mode-vi J            send-keys -X scroll-down
bind -T copy-mode-vi C-k          send-keys -X halfpage-up
bind -T copy-mode-vi C-j          send-keys -X halfpage-down

yank="~/tmuxNOC/yank.sh"

# Copy selected text
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \; run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-no-clear "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X clear-selection


# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind C-r run "~/tmuxNOC/renew_env.sh"

# =====================================
# ===           Theme               ===
# =====================================

# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"


# =====================================
# ===    Appearance and status bar  ===
# ======================================

set -g mode-style "fg=default,bg=$color_main"

# command line style
set -g message-style "fg=$color_main,bg=$color_dark"

# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""

set -wg window-status-format " #I:#W "
set -wg window-status-current-style "fg=$color_light,bold,bg=$color_main"
set -wg window-status-current-format \
"#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[default] #I:#W# \
#[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

# when window has monitoring notification
set -wg window-status-activity-style "fg=$color_light,bold,bg=$color_blue"

# outline for active pane
set -wg pane-active-border-style "fg=$color_main"

# general status bar settings
set -g status on
set -g status-interval 5
set -g status-justify left
set -g status-right-length 100
set -g status-left-length 100

# define widgets we're going to use in status bar
wg_session="#[fg=$color_session_text] #S #[default]"
wg_date="#[fg=$color_secondary]%d.%m.%Y %H:%M#[default]"
wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"

wg_zoomed="#[fg=$color_dark,bg=$color_secondary][Z]#[default]"
wg_not_zoomed="[Z]"
wg_is_zoomed="#{?window_zoomed_flag,#{wg_zoomed},#{wg_not_zoomed}}"

wg_mouse="#[fg=$color_dark,bg=$color_secondary][Mouse]#[default]"
wg_not_mouse="[Mouse]"
wg_is_mouse="#{?mouse,#{wg_mouse},#{wg_not_mouse}}"

set -g status-left "$wg_session#{prefix_highlight}$wg_is_zoomed "
set -g status-right "$wg_is_mouse | $wg_user_host | $wg_date "

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"
set -g @prefix_highlight_empty_prompt '[^A]'

# ============================
# ===       Plugins        ===
# ============================
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-copycat'

# Run all plugins' scripts
run '~/tmuxNOC/plugins/tpm/tpm'
